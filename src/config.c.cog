// Configuration and configuration file handling (implementation)

#include "lib.h"

//
// Global variables
//

config_t config;

/*[[[cog

import cog
import config_def

cog.outl("const wchar_t *keys_help[PA_QUIT + 1] = {")
cog.outl("  L\"Do nothing\",")

for option, option_def in config_def.config_def["keys"].items():
  (type, default_value, in_config, comment) = option_def

  if option == "quit":
    comma = ""
  else:
    comma = ","
  cog.outl("  L\"" + comment + "\"" + comma) 

cog.outl("};")
]]]

[[[end]]]*/

//
// Helper macros and functions
//

// Helper of conf_init() conf_handler(). Initialize the values of all color
// pairs used for transitions.
#define set_transition_colours                                                 \
  config.colours.trans_mode_name = 100 * config.colours.stat_indic_mode.pair + \
                                   config.colours.stat_indic_name.pair;        \
  config.colours.trans_name_loc = 100 * config.colours.stat_indic_name.pair +  \
                                  config.colours.stat_indic_loc.pair;          \
  config.colours.trans_prompt_help =                                           \
      100 * config.colours.stat_input_prompt.pair +                            \
      config.colours.stat_input_help.pair;                                     \
  config.colours.trans_prompt_em =                                             \
      100 * config.colours.stat_input_prompt.pair +                            \
      config.colours.stat_input_em.pair;

// Helper of various conf_...() functions and methods. Return true if src is
// equal to 'true', 'yes', or '1'. Return false otherwise.
bool str2bool(const char *src) {
  if (0 == strcasecmp(src, "TRUE") || 0 == strcasecmp(src, "YES") ||
      0 == strcmp(src, "1"))
    return true;
  else
    return false;
}

// Helper of various conf_...() functions and methods. Return the integer value
// held into src as an integer. If src cannot be parsed into an integer,
// return INT_MIN.
int str2int(const char *src) {
  int val, vals_read;
  vals_read = sscanf(src, "%d", &val);
  if (1 != vals_read)
    return INT_MIN;
  else
    return val;
}

// Helper of various conf_...() functions and methods. Return the ncurses color
// that corresponds to src. Allowed values for src are 'black', 'red', 'green',
// 'yellow', 'blue', 'magenta', 'cyan', 'white', a positive integer, or
// '#rrggbb'.
short str2colour(const char *src) {
  // Try to parse src as integer. If successful, return it.
  const int srci = str2int(src);
  if (srci >= 0)
    return srci;

  // If src matches a color name such as 'black', 'red', etc. return the
  // corresponding color.
  else if (0 == strcasecmp(src, "BLACK"))
    return COLOR_BLACK;
  else if (0 == strcasecmp(src, "RED"))
    return COLOR_RED;
  else if (0 == strcasecmp(src, "GREEN"))
    return COLOR_GREEN;
  else if (0 == strcasecmp(src, "YELLOW"))
    return COLOR_YELLOW;
  else if (0 == strcasecmp(src, "BLUE"))
    return COLOR_BLUE;
  else if (0 == strcasecmp(src, "MAGENTA"))
    return COLOR_MAGENTA;
  else if (0 == strcasecmp(src, "CYAN"))
    return COLOR_CYAN;
  else if (0 == strcasecmp(src, "WHITE"))
    return COLOR_WHITE;

  // Otherwise, try to parse src as '#rrggbb' and return the corresponding color
  else {
    static short ret = 8;
    unsigned red = 0, green = 0, blue = 0;
    if (3 != sscanf(src, "#%2x%2x%2x", &red, &green, &blue)) {
      // Unable to parse color; return -1
      return -1;
    } else {
      red = (red * 1000) / 256;
      green = (green * 1000) / 256;
      blue = (blue * 1000) / 256;
      init_color(ret, red, green, blue);
      return ret++;
    }
  }
}

// Helper of various conf_...() functions and methods. Return the ncurses key
// mapping that corresponds to src.
int str2ch(const char *src) {
  if (0 == strcasecmp(src, "KEY_UP"))
    return KEY_UP;
  else if (0 == strcasecmp(src, "KEY_DOWN"))
    return KEY_DOWN;
  else if (0 == strcasecmp(src, "KEY_LEFT"))
    return KEY_LEFT;
  else if (0 == strcasecmp(src, "KEY_RIGHT"))
    return KEY_RIGHT;
  else if (0 == strcasecmp(src, "KEY_PPAGE"))
    return KEY_PPAGE;
  else if (0 == strcasecmp(src, "KEY_NPAGE"))
    return KEY_NPAGE;
  else if (0 == strcasecmp(src, "KEY_HOME"))
    return KEY_HOME;
  else if (0 == strcasecmp(src, "KEY_END"))
    return KEY_END;
  else if (0 == strcasecmp(src, "ESC"))
    return '\e';
  else if (0 == strcasecmp(src, "KEY_BREAK"))
    return KEY_BREAK;
  else if (0 == strcasecmp(src, "ETX"))
    return 0x03;
  else if (0 == strcasecmp(src, "KEY_ENTER"))
    return KEY_ENTER;
  else if (0 == strcasecmp(src, "LF"))
    return '\n';
  else if (0 == strcasecmp(src, "KEY_BACKSPACE"))
    return KEY_BACKSPACE;
  else if (0 == strcasecmp(src, "BS"))
    return '\b';
  else if (0 == strcasecmp(src, "HT"))
    return '\t';
  else if (0 == strcasecmp(src, "SPACE"))
    return ' ';
  else if (0 == strcasecmp(src, "F1"))
    return KEY_F(1);
  else if (0 == strcasecmp(src, "F2"))
    return KEY_F(2);
  else if (0 == strcasecmp(src, "F3"))
    return KEY_F(3);
  else if (0 == strcasecmp(src, "F4"))
    return KEY_F(4);
  else if (0 == strcasecmp(src, "F5"))
    return KEY_F(5);
  else if (0 == strcasecmp(src, "F6"))
    return KEY_F(6);
  else if (0 == strcasecmp(src, "F7"))
    return KEY_F(7);
  else if (0 == strcasecmp(src, "F8"))
    return KEY_F(8);
  else if (0 == strcasecmp(src, "F9"))
    return KEY_F(9);
  else if (0 == strcasecmp(src, "F10"))
    return KEY_F(10);
  else if (0 == strcasecmp(src, "F11"))
    return KEY_F(11);
  else if (0 == strcasecmp(src, "F12"))
    return KEY_F(12);
  else if (src[0] >= 33 && src[0] <= 126 && 1 == strlen(src))
    return src[0];
  else
    return -1;
}

// Helper of conf_handler(). Return an if statement that matches if section is
// equal to s.
#define conf_section(s) if (0 == strcmp(section, s))

// Helper of conf_handler(). Set trgt to the color that corresponds to value,
// if name is equal to n. value is formatted as 3 color definitions (as
// accepted by str2colour) separated by whitespace.
#define conf_set_colour(n, trgt)                                               \
  if (0 == strcmp(name, n)) {                                                  \
    char fg[10], bg[10], bold[10];                                             \
    const int vals_read = sscanf(value, "%9s%9s%9s", fg, bg, bold);            \
    if (3 != vals_read) {                                                      \
      swprintf(errmsg, BS_SHORT,                                               \
               L"Config parse error at %s/%s: invalid color value '%s'",      \
               section, name, value);                                          \
      winddown(ES_CONFIG_ERROR, errmsg);                                       \
    }                                                                          \
    trgt.fg = str2colour(fg);                                                  \
    if (-1 == trgt.fg) {                                                       \
      swprintf(errmsg, BS_SHORT,                                               \
               L"Config parse error at %s/%s: invalid foreground color '%s'", \
               section, name, fg);                                             \
      winddown(ES_CONFIG_ERROR, errmsg);                                       \
    }                                                                          \
    trgt.bg = str2colour(bg);                                                  \
    if (-1 == trgt.bg) {                                                       \
      swprintf(errmsg, BS_SHORT,                                               \
               L"Config parse error at %s/%s: invalid background color '%s'", \
               section, name, bg);                                             \
      winddown(ES_CONFIG_ERROR, errmsg);                                       \
    }                                                                          \
    trgt.bold = str2bool(bold);                                                \
    return true;                                                               \
  }

// Helper of conf_handler(). Set trgt to the set of key mappings that
// correspond to value, if name is equal to n. value is formatted as 8 key
// mapping definitions (as accepted by str2ch) separated by whitespace.
#define conf_set_key(n, trgt)                                                  \
  if (0 == strcmp(name, n)) {                                                  \
    unsigned i;                                                                \
    char *keys[8];                                                             \
    for (i = 0; i < 8; i++)                                                    \
      keys[i] = walloca(BS_SHORT);                                             \
    const int keys_read = sscanf(value, "%s%s%s%s%s%s%s%s", keys[0], keys[1],  \
                                 keys[2], keys[3], keys[4], keys[5], keys[6],  \
                                 keys[7]);                                     \
    if (0 == keys_read) {                                                      \
      swprintf(errmsg, BS_SHORT,                                               \
               L"Config parse error at %s/%s: invalid key mapping value '%s'", \
               section, name, value);                                          \
      winddown(ES_CONFIG_ERROR, errmsg);                                       \
    }                                                                          \
    for (i = 0; i < keys_read; i++) {                                          \
      trgt[i] = str2ch(keys[i]);                                               \
      if (-1 == trgt[i]) {                                                     \
        swprintf(                                                              \
            errmsg, BS_SHORT,                                                  \
            L"Config parse error at %s/%s: key mapping no. %d is invalid",     \
            section, name, value);                                             \
        winddown(ES_CONFIG_ERROR, errmsg);                                     \
      }                                                                        \
    }                                                                          \
    for (i = keys_read; i < 8; i++)                                            \
      trgt[i] = 0;                                                             \
    return true;                                                               \
  }

// Helper of conf_handler(). Set trgt to the boolean stored in value, using
// str2bool(), if name is equal to n.
#define conf_set_bool(n, trgt)                                                 \
  if (0 == strcmp(name, n)) {                                                  \
    trgt = str2bool(value);                                                    \
    return true;                                                               \
  }

// Helper of conf_handler(). Set trgt to the integer stored in value, using
// str2int(), if name is equal to n. min and max can be used to define a lower
// and an upper boundary for value, for error-checking purposes.
#define conf_set_int(n, trgt, min, max)                                        \
  if (0 == strcmp(name, n)) {                                                  \
    const int val = str2int(value);                                            \
    if (INT_MIN == val) {                                                      \
      swprintf(errmsg, BS_SHORT,                                               \
               L"Config parse error at %s/%s: not an integer", section, name); \
      winddown(ES_CONFIG_ERROR, errmsg);                                       \
    }                                                                          \
    if (val < min || val > max) {                                              \
      swprintf(errmsg, BS_SHORT,                                               \
               L"Config parse error at %s/%s: value out of range", section,    \
               name);                                                          \
      winddown(ES_CONFIG_ERROR, errmsg);                                       \
    }                                                                          \
    trgt = val;                                                                \
    return true;                                                               \
  }

// Helper of conf_handler(). Set trgt to a string copy of value, if name is
// equal to n.
#define conf_set_string(n, trgt)                                               \
  if (0 == strcmp(name, n)) {                                                  \
    if (NULL != trgt)                                                          \
      free(trgt);                                                              \
    if (NULL == value)                                                         \
      trgt = NULL;                                                             \
    else                                                                       \
      trgt = xstrdup(value);                                                   \
    return true;                                                               \
  }

// Helper of conf_handler(). Set trgt to a wide string copy of value, if name is
// equal to n.
#define conf_set_wstring(n, trgt)                                              \
  if (0 == strcmp(name, n)) {                                                  \
    const unsigned value_len = strlen(value);                                  \
    if (NULL != trgt)                                                          \
      free(trgt);                                                              \
    if (NULL == value)                                                         \
      trgt = NULL;                                                             \
    else {                                                                     \
      trgt = walloc(value_len);                                                \
      mbstowcs(trgt, value, value_len);                                        \
    }                                                                          \
    return true;                                                               \
  }

// Helper of conf_handler(). Error out with a "no such option" error message.
#define conf_no_such_option                                                    \
  swprintf(errmsg, BS_SHORT,                                                   \
           L"Config parse error: no such option '%s' in section '%s'", name,   \
           section);                                                           \
  winddown(ES_CONFIG_ERROR, errmsg);                                           \
  return false;

// Helper of conf_handler(). Error out with a "no such section" error message.
#define conf_no_such_section                                                   \
  swprintf(errmsg, BS_SHORT, L"Config parse error: no such section '%s'",      \
           section);                                                           \
  winddown(ES_CONFIG_ERROR, errmsg);                                           \
  return false;

// Helper of configure(), used as a handler function for init_parse()
static int conf_handler(void *user, const char *section, const char *name,
                        const char *value) {
  wchar_t errmsg[BS_SHORT]; // error message

/*[[[cog

for section, options in config_def.config_def.items():
  cog.outl("  conf_section(\"" + section + "\") {")

  for option, option_def in options.items():
    (type, default_value, in_config, comment) = option_def
    # Option is not allowed in the config file; skip it
    if not in_config:
      continue

    # Option is allowed in the config file
    if type[0] == "bool":
      cog.outl("    conf_set_bool(\"" + option + "\", config." + section + "." + option + ");")
    elif type[0] == "int":
      cog.outl("    conf_set_int(\"" + option + "\", config." + section + "." + option + ", " + str(type[1]) + ", " + str(type[2]) + ");")
    elif type[0] == "string":
      cog.outl("    conf_set_string(\"" + option + "\", config." + section + "." + option + ");")
    elif type[0] == "wstring":
      cog.outl("    conf_set_wstring(\"" + option + "\", config." + section + "." + option + ");")
    elif type[0] == "colour":
      cog.outl("    conf_set_colour(\"" + option + "\", config." + section + "." + option + ");")
    elif type[0] == "key":
      cog.outl("    conf_set_key(\"" + option + "\", config." + section + "[PA_" + option.upper() + "]);")

  cog.outl("    conf_no_such_option;")
  cog.outl("  }")
  cog.outl()

]]]

[[[end]]]*/

  conf_no_such_section;
}

//
// Functions
//

void conf_init() {
/*[[[cog

pair = 10

for section, options in config_def.config_def.items():
  for option, option_def in options.items():
    (type, default_value, in_config, comment) = option_def

    if None != comment:
      cog.outl("  // Default value for: " + comment)
    else:
      cog.outl("  // Default value for: config." + section + "." + option)

    if type[0] == "bool":
      cog.outl("  config." + section + "." + option + " = str2bool(\"" + default_value[0] + "\");")
    elif type[0] == "int":
      cog.outl("  config." + section + "." + option + " = str2int(\"" + default_value[0] + "\");")
    elif type[0] == "string":
      if None == default_value:
        cog.outl("  config." + section + "." + option + " = NULL;")
      else:
        cog.outl("  config." + section + "." + option + " = xstrdup(\"" + default_value[0] + "\");")
    elif type[0] == "wstring":
      if None == default_value:
        cog.outl("  config." + section + "." + option + " = NULL;")
      else:
        cog.outl("  config." + section + "." + option + " = xwcsdup(L\"" + default_value[0] + "\");")
    elif type[0] == "colour":
      cog.outl("  config." + section + "." + option + ".fg = str2colour(\"" + default_value[0] + "\");")
      cog.outl("  config." + section + "." + option + ".bg = str2colour(\"" + default_value[1] + "\");")
      cog.outl("  config." + section + "." + option + ".bold = str2bool(\"" + default_value[2] + "\");")
      cog.outl("  config." + section + "." + option + ".pair = " + str(pair) + ";")
      pair += 1
    elif type[0] == "key":
      for i in range(8):
        if i < len(default_value):
          cog.outl("  config." + section + "[PA_" + option.upper() + "][" + str(i) + "] = str2ch(\"" + default_value[i] + "\");")
        else:
          cog.outl("  config." + section + "[PA_" + option.upper() + "][" + str(i) + "] = 0;")

    cog.outl()
]]]

[[[end]]]*/

  set_transition_colours;
}

void configure() {
  FILE *fp;                 // config file
  wchar_t errmsg[BS_SHORT]; // error message

  // Find and open the config file
  if (NULL != config.misc.config_path) {
    // -C option was used; try to open specified config file, and fail if not
    // possible
    fp = fopen(config.misc.config_path, "r");
    if (NULL == fp) {
      swprintf(errmsg, BS_SHORT, L"Unable to open config file '%s'",
               config.misc.config_path);
      winddown(ES_CONFIG_ERROR, errmsg);
    }
  } else {
    // No -C option; try to open specified config file at the standard locations
    const char *home = getenv("HOME");
    const unsigned hc_len = strlen(home) + 19;
    char *hc = salloca(hc_len);
    snprintf(hc, hc_len, "%s/.config/qman.conf", home);
    fp = fopen(hc, "r");
    if (NULL == fp)
      fp = fopen("/etc/xdg/qman.conf", "r");
  }

  // If we have a config file, process it
  if (NULL != fp) {
    ini_parse_file(fp, conf_handler, &config);
    fclose(fp);
  }
  set_transition_colours;
}
