// Configuration and configuration file handling (definition)

#ifndef CONFIG_H

#define CONFIG_H

#include "lib.h"

//
// Types
//

// A colour
typedef struct {
  short fg;   // foreground colour no.
  bool bold;  // true if foreground colour is bold, false otherwise
  short bg;   // background colour no.
  short pair; // pair no.
} colour_t;

/*[[[cog

import cog
import config_def

cog.outl("// A program action")
cog.outl("typedef enum {")
cog.outl("  PA_NULL,  // Do nothing (must be first member of action_t)")

for option, option_def in config_def.config_def["keys"].items():
  (type, default_value, in_config, comment) = option_def

  if option == "quit":
    comma = " "
  else:
    comma = ","
  cog.outl("  {:30s} // {}".format("PA_" + option.upper() + comma, comment))

cog.outl("} action_t;")
cog.outl()

for section, options in config_def.config_def.items():
  cog.outl("// Configuration structure for section '" + section + "'")

  # Section "keys" is special and is defined as an array, not a structure
  if section == "keys":
    cog.outl("typedef int config_keys_t[PA_QUIT + 1][8];")
    cog.outl()
    continue

  # All other sections are defined as structures
  cog.outl("typedef struct {")
  first_option = True
  for option, option_def in options.items():
    if first_option:
      first_option = False
    else:
      cog.outl()

    (type, default_value, in_config, comment) = option_def

    cog.outl("  // " + comment)

    if type[0] == "bool":
      cog.outl("  bool " + option + ";")
    elif type[0] == "int":
      cog.outl("  unsigned " + option + ";")
    elif type[0] == "string":
      cog.outl("  char *" + option + ";")
    elif type[0] == "wstring":
      cog.outl("  wchar_t *" + option + ";")
    elif type[0] == "colour":
      cog.outl("  colour_t " + option + ";")
    else:
      raise NameError("Unknown type '{}' for option '{}'".format(type[0], option))

  cog.outl("} config_" + section + "_t;")
  cog.outl()

]]]

[[[end]]]*/

// Main configuration structure
typedef struct {
  config_chars_t chars;
  config_colours_t colours;
  config_keys_t keys;
  config_layout_t layout;
  config_misc_t misc;
} config_t;

//
// Constants
//

// Alternate configuration file locations
#define CONFIG_PATHS [ "~/.config/qman.conf", "/etc/xdg/qman.conf" ]

//
// Global variables
//

// Program configuration
extern config_t config;

// Help text for program actions and their corresponding key character mappings
extern const wchar_t *keys_help[PA_QUIT + 1];

//
// Functions
//

// Initialize configuration to sane defaults
extern void conf_init();

// Read the configuration file and set members of config appropriately. This
// function tries to find the config file in the following locations:
// (1) value of config.misc.config_path, set with '-C'
// (2) ~/.config/qman.conf
// (3) /etc/xdg/qman.conf
extern void configure();

#endif
